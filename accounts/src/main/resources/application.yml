server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
  jpa:
    show-sql: true
  sql:
    init:
      mode: always
  config:
    import: "optional:configserver:http://localhost:8071/"
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      sliding-window-size: 10 # Анализировать последние 10 вызовов и считать, сколько из них завершились ошибкой.
      failure-rate-threshold: 50 # Переход в OPEN, если процент ошибок больше 50.
      wait-duration-in-open-state: 10000 # Количество миллисекунд в состоянии OPEN
      # Делает в состояние Half-Open два запроса и если хотя бы один будет не успешным, переводит опять в OPEN.
      permitted-number-of-calls-in-half-open-state: 2

resilience4j.retry:
  configs:
    default:
      max-attempts: 3
      wait-duration: 500
      enable-exponential-backoff: true
      exponential-backoff-multiplier: 2
      # Нужно использовать или ignore-exceptions или retry-exceptions
#      ignore-exceptions:
#        - java.lang.NullPointerException # Чтобы при null pointer exception не было retry
      retry-exceptions: # Какие exceptions будут использоваться для retry, остальные нет
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeout-duration: 1000
      limit-refresh-period: 5000
      limit-for-period: 1